"use strict";window.ne||(window.ne=window.ne||{}),ne.component||(ne.component=ne.component||{}),function(t){var n=ne.util,i=n.inArray;t.Spinbox=n.defineClass({init:function(t,n){this._$containerElement=$(t),this._$inputElement=this._$containerElement.children('input[type="text"]'),this._value=null,this._option=null,this._$upButton=null,this._$downButton=null,this._initialize(n)},_initialize:function(t){this._setOption(t),this._assignHTMLElements(),this._assignDefaultEvents(),this.setValue(this._option.defaultValue)},_setOption:function(t){if(this._option={defaultValue:0,step:1,max:Number.MAX_SAFE_INTEGER||9007199254740991,min:Number.MIN_SAFE_INTEGER||-9007199254740991,upBtnTag:"<button><strong>+</strong></button>",downBtnTag:"<button><strong>-</strong></button>"},n.extend(this._option,t),n.isArray(this._option.exclusion)||(this._option.exclusion=[]),!this._isValidOption())throw new Error("Spinbox option is invaild")},_isValidOption:function(){var t=this._option;return this._isValidValue(t.defaultValue)&&this._isValidStep(t.step)},_isValidValue:function(t){var e,o,s;return n.isNumber(t)?(e=this._option,o=t<=e.max&&t>=e.min,s=-1===i(t,e.exclusion),o&&s):!1},_isValidStep:function(t){var i=this._option.max-this._option.min;return n.isNumber(t)&&i>t},_assignHTMLElements:function(){this._setInputSizeAndMaxLength(),this._makeButton()},_makeButton:function(){var t=this._$inputElement,n=this._$upButton=$(this._option.upBtnTag),i=this._$downButton=$(this._option.downBtnTag);n.insertBefore(t),n.wrap("<div></div>"),i.insertAfter(t),i.wrap("<div></div>")},_setInputSizeAndMaxLength:function(){var t=this._$inputElement,n=String(this._option.min).length,i=String(this._option.max).length,e=Math.max(n,i);t.attr("size")||t.attr("size",e),t.attr("maxlength")||t.attr("maxlength",e)},_assignDefaultEvents:function(){var t=n.bind(this._onClickButton,this),i=n.bind(this._onKeyDownInputElement,this);this._$upButton.on("click",{isDown:!1},t),this._$downButton.on("click",{isDown:!0},t),this._$inputElement.on("keydown",i),this._$inputElement.on("change",n.bind(this._onChangeInput,this))},_setNextValue:function(t){var n=this._option,e=n.step,o=n.min,s=n.max,u=n.exclusion,a=this.getValue();t&&(e=-e);do a+=e,a>s?a=o:o>a&&(a=s);while(i(a,u)>-1);this.setValue(a)},_onClickButton:function(t){this._setNextValue(t.data.isDown)},_onKeyDownInputElement:function(t){var n,i=t.which||t.keyCode;switch(i){case 38:n=!1;break;case 40:n=!0;break;default:return}this._setNextValue(n)},_onChangeInput:function(){var t=Number(this._$inputElement.val()),n=this._isValidValue(t)&&this._value!==t,i=n?t:this._value;this._value=i,this._$inputElement.val(i)},setStep:function(t){this._isValidStep(t)&&(this._option.step=t)},getStep:function(){return this._option.step},getValue:function(){return this._value},setValue:function(t){this._$inputElement.val(t).change()},getOption:function(){return this._option},addExclusion:function(t){var n=this._option.exclusion;i(t,n)>-1||n.push(t)},removeExclusion:function(t){var n=this._option.exclusion,e=i(t,n);-1!==e&&n.splice(e,1)},getContainerElement:function(){return this._$containerElement[0]}})}(ne.component);
"use strict";window.ne||(window.ne=window.ne||{}),ne.component||(ne.component=ne.component||{}),function(t){var i=ne.util,n=ne.component.Spinbox,e=/\s*(\d{1,2})\s*:\s*(\d{1,2})\s*([ap][m])?(?:[\s\S]*)/i,s='<table class="timepicker"><tr class="timepicker-row"></tr></table>',o='<td class="timepicker-column"></td>',u='<td class="timepicker-column timepicker-spinbox"><input type="text" class="timepicker-spinbox-input"></td>',h='<button class="timepicker-btn timepicker-btn-up"><strong>+</strong></button>',r='<button class="timepicker-btn timepicker-btn-down"><strong>-</strong></button>';t.TimePicker=i.defineClass({init:function(t){this.$timePickerElement=null,this._$inputElement=null,this._$meridianElement=null,this._hourSpinbox=null,this._minuteSpinbox=null,this._isShown=!1,this._option=null,this._hour=null,this._minute=null,this._initialize(t)},_initialize:function(t){this._setOption(t),this._makeSpinboxes(),this._makeTimePickerElement(),this._assignDefaultEvents(),this.fromSpinboxes()},_setOption:function(t){this._option={defaultHour:0,defaultMinute:0,inputElement:null,hourStep:1,minuteStep:1,hourExclusion:null,minuteExclusion:null,showMeridian:!1,position:{}},i.extend(this._option,t)},_makeSpinboxes:function(){var t=this._option;this._hourSpinbox=new n(u,{defaultValue:t.defaultHour,min:0,max:23,step:t.hourStep,upBtnTag:h,downBtnTag:r,exclusion:t.hourExclusion}),this._minuteSpinbox=new n(u,{defaultValue:t.defaultMinute,min:0,max:59,step:t.minuteStep,upBtnTag:h,downBtnTag:r,exclusion:t.minuteExclusion})},_makeTimePickerElement:function(){var t,i=this._option,n=$(s),e=n.find(".timepicker-row"),u=$(o).addClass("colon").append(":");e.append(this._hourSpinbox.getContainerElement(),u,this._minuteSpinbox.getContainerElement()),i.showMeridian&&(t=$(o).addClass("meridian").append(this._isPM?"PM":"AM"),this._$meridianElement=t,e.append(t)),n.hide(),$("body").append(n),this.$timePickerElement=n,i.inputElement&&(n.css("position","absolute"),this._$inputElement=$(i.inputElement),this._setDefaultPosition(this._$inputElement))},_setDefaultPosition:function(t){var n=t[0],e=this._option.position,s=e.x,o=e.y;i.isNumber(s)&&i.isNumber(o)||(s=n.offsetLeft,o=n.offsetTop+n.offsetHeight+3),this.setXYPosition(s,o)},_assignDefaultEvents:function(){var t=this._$inputElement;t&&(this._assignEventsToInputElement(),this.on("change",function(){t.val(this.getTime())},this)),this.$timePickerElement.on("change",i.bind(this._onChangeTimePicker,this))},_assignEventsToInputElement:function(){var t=this,i=this._$inputElement;i.on("click",function(i){t.open(i)}),i.on("change",function(){t.setTimeFromInputElement()||i.val(t.getTime())})},_onChangeTimePicker:function(){this.fromSpinboxes()},_isClickedInside:function(t){var i=$.contains(this.$timePickerElement[0],t.target),n=this._$inputElement&&this._$inputElement[0]===t.target;return i||n},_formToTimeFormat:function(){var t,i,n=this._hour,e=this._minute,s=this._getPostfix();return this._option.showMeridian&&(n%=12),t=10>n?"0"+n:n,i=10>e?"0"+e:e,t+":"+i+s},_setIsPM:function(){this._isPM=this._hour>11},_getPostfix:function(){var t="";return this._option.showMeridian&&(t=this._isPM?" PM":" AM"),t},setXYPosition:function(t,n){var e;i.isNumber(t)&&i.isNumber(n)&&(e=this._option.position,e.x=t,e.y=n,this.$timePickerElement.css({left:t,top:n}))},show:function(){this.$timePickerElement.show(),this._isShown=!0},hide:function(){this.$timePickerElement.hide(),this._isShown=!1},open:function(t){this._isShown||($(document).on("click",i.bind(this.close,this)),this.show(),this.fire("open",t))},close:function(t){this._isShown&&!this._isClickedInside(t)&&($(document).off(t),this.hide(),this.fire("close",t))},toSpinboxes:function(){var t=this._hour,i=this._minute;this._hourSpinbox.setValue(t),this._minuteSpinbox.setValue(i)},fromSpinboxes:function(){var t=this._hourSpinbox.getValue(),i=this._minuteSpinbox.getValue();this.setTime(t,i)},setTimeFromInputElement:function(t){var i=t||this._$inputElement;return!(!i||!this.setTimeFromString(i.val()))},setHour:function(t){return this.setTime(t,this._minute)},setMinute:function(t){return this.setTime(this._hour,t)},setTime:function(t,n){var e=i.isNumber(t)&&i.isNumber(n),s=this._hour!==t||this._minute!==n,o=24>t&&60>n;return e&&s&&o?(this._hour=t,this._minute=n,this._setIsPM(),this.toSpinboxes(),this._$meridianElement&&this._$meridianElement.html(this._getPostfix()),this.fire("change"),!0):!1},setTimeFromString:function(t){var i,n,s,o;return e.test(t)&&(i=Number(RegExp.$1),n=Number(RegExp.$2),s=RegExp.$3.toUpperCase(),24>i&&this._option.showMeridian&&(o="PM"===s?!0:"AM"===s?!1:this._isPM,o&&(i+=12))),this.setTime(i,n)},setHourStep:function(t){this._hourSpinbox.setStep(t),this._option.hourStep=this._hourSpinbox.getStep()},setMinuteStep:function(t){this._minuteSpinbox.setStep(t),this._option.minuteStep=this._minuteSpinbox.getStep()},addHourExclusion:function(t){this._hourSpinbox.addExclusion(t)},addMinuteExclusion:function(t){this._minuteSpinbox.addExclusion(t)},getHourStep:function(){return this._option.hourStep},getMinuteStep:function(){return this._option.minuteStep},removeHourExclusion:function(t){this._hourSpinbox.removeExclusion(t)},removeMinuteExclusion:function(t){this._minuteSpinbox.removeExclusion(t)},getHour:function(){return this._hour},getMinute:function(){return this._minute},getTime:function(){return this._formToTimeFormat()}}),ne.util.CustomEvents.mixin(t.TimePicker)}(ne.component);
"use strict";window.ne||(window.ne={}),ne.component||(ne.component={}),function(e){var t=ne.component.Calendar.Util,i=ne.util,n=/yyyy|yy|mm|m|dd|d/gi,a={yyyy:{expression:"(\\d{4}|\\d{2})",type:"year"},yy:{expression:"(\\d{4}|\\d{2})",type:"year"},y:{expression:"(\\d{4}|\\d{2})",type:"year"},mm:{expression:"(1[012]|0[1-9]|[1-9]\\b)",type:"month"},m:{expression:"(1[012]|0[1-9]|[1-9]\\b)",type:"month"},dd:{expression:"([12]\\d{1}|3[01]|0[1-9]|[1-9]\\b)",type:"date"},d:{expression:"([12]\\d{1}|3[01]|0[1-9]|[1-9]\\b)",type:"date"}},r=1900,s=3e3,o=[0,31,28,31,30,31,30,31,31,30,31,30,31];e.DatePicker=ne.util.defineClass({init:function(e,t){this._calendar=t,this._$calendarElement=$(t.getElement()),this._element=e.element,this._dateForm=e.dateForm||"yyyy-mm-dd",this._regExp=null,this._formOrder=[],this._date=e.date||i.getDateHashTable(null),this._defaultCentury=e.defaultCentury||"20",this._selectableClass=e.selectableClass||"selectableClass",this._startEdge=e.startDate,this._endEdge=e.endDate,this._withTimePicker=!!e.withTimePicker,this._timePicker=null,this._initializeDatePicker(e)},_initializeDatePicker:function(e){e.startDate=e.startDate||{year:r,month:1,date:1},e.endDate=e.endDate||{year:s,month:1,date:1},this._startEdge=t.getTime(e.startDate),this._endEdge=t.getTime(e.endDate),this._element&&this._bindElementEvent(),this._withTimePicker&&this._initializeTimePicker(),this.setDateForm()},_initializeTimePicker:function(){var e=this;this._timePicker=new ne.component.TimePicker({showMeridian:!0}),this._timePicker.on("change",function(){e.setDate()}),this._$calendarElement.append(this._timePicker.$timePickerElement),this._timePicker.show()},_isValidYear:function(e){return i.isNumber(e)&&e>r&&s>e},_isValidMonth:function(e){return i.isNumber(e)&&e>0&&13>e},_isValidDate:function(e){var t,n=e.year,a=e.month,r=e.date;return this._isValidYear(n)&&this._isValidMonth(a)?(t=o[a],2===a&&n%4===0&&(n%100!==0||n%400===0)&&(t=29),!!(i.isNumber(r)&&r>0&&t>=r)):!1},_bindElementEvent:function(){$(this._element).on("click",ne.util.bind(this._onClickPicker,this)),$(this._element).on("keydown",ne.util.bind(this._onKeydownPicker,this))},_bindCloseLayerEvent:function(){var e=ne.util.bind(function(t){var i=t.target.className.indexOf(this._calendar._option.classPrefix)>-1,n=$.contains(this._$calendarElement[0],t.target),a=this._element===t.target,r=this.constructor.enabledPicker===this;!r||i||n||a||($(document).off("click",e),this._onKeydownPicker(t),this.close())},this);$(document).on("click",e)},_arrangeLayer:function(){var e=this._$calendarElement,t=this._getBoundingClientRect();t&&e.css({position:"absolute",left:t.left+"px",top:t.bottom+"px"})},_getBoundingClientRect:function(e){var t,i,n=e||this._element;return n?(t=n.getBoundingClientRect(),i=Math.ceil,{left:i(t.left),top:i(t.top),bottom:i(t.bottom),right:i(t.right)}):null},_bindOnClickToCalendar:function(){ne.util.isFunction(this._binder)||(this._binder=ne.util.bind(this._onClickCalendar,this)),this._$calendarElement.find("."+this._selectableClass).on("click",this._binder)},_unbindOnClickToCalendar:function(){this._$calendarElement.find("."+this._selectableClass).off("click")},_onClickPicker:function(){this.open()},_setDateFromString:function(e){var t=this._extractDate(e);t&&!this._isRestricted(t)?(this._timePicker&&this._timePicker.setTimeFromInputElement($(this._element)),this.setDate(t.year,t.month,t.date)):this.setDate()},_onKeydownPicker:function(e){e&&13===e.keyCode&&this._setDateFromString(this._element.value)},_onClickCalendar:function(e){var i,n=e.target,a=n.className,r=Number(n.innerText||n.textContent||n.nodeValue);r&&!isNaN(r)&&(i=a.indexOf("prev-mon")>-1?t.getRelativeDate(0,-1,r-1,this._calendar._getShownDate()):a.indexOf("next-mon")>-1?t.getRelativeDate(0,1,r-1,this._calendar._getShownDate()):t.getRelativeDate(0,0,r-1,this._calendar._getShownDate()),this.setDate(i.year,i.month,i.date))},_formed:function(){var e=this._date.year,t=this._date.month,i=this._date.date;t=10>t?"0"+t:t,i=10>i?"0"+i:i;var a,r=this._dateForm,s={yyyy:e,yy:String(e).substr(2,2),mm:t,m:Number(t),dd:i,d:Number(i)};return a=r.replace(n,function(e){return s[e.toLowerCase()]||""})},_extractDate:function(e){var t=this._formOrder,i={},n=this._regExp;return n.lastIndex=0,n.test(e)?(i[t[0]]=Number(RegExp.$1),i[t[1]]=Number(RegExp.$2),i[t[2]]=Number(RegExp.$3),2===String(i.year).length&&(i.year=Number(this._defaultCentury+i.year)),i):!1},_isRestricted:function(e){var i=this._startEdge,n=this._endEdge,a=t.getTime(e);return!this._isValidDate(e)||i>a||a>n},_bindDrawEventForSelectableRange:function(){this._calendar.on("draw",ne.util.bind(function(e){this._isRestricted(e)||e.$dateContainer.addClass(this._selectableClass)},this))},_bindCalendarCustomEvent:function(){this._calendar.on("beforeDraw",ne.util.bind(function(){this._unbindOnClickToCalendar()},this)),this._calendar.on("afterDraw",ne.util.bind(function(){this._bindOnClickToCalendar()},this))},_unbindCalendarEvent:function(){this._calendar.off()},open:function(){var e=this.constructor.enabledPicker;if(e){if(e===this)return;e.close()}this._arrangeLayer(),this._bindDrawEventForSelectableRange(),this._bindCloseLayerEvent(),this._bindCalendarCustomEvent(),this._calendar.draw(this._date.year,this._date.month,!1),this._$calendarElement.show(),this.constructor.enabledPicker=this},close:function(){this._setDateFromString(this._element.value),this._unbindOnClickToCalendar(),this._unbindCalendarEvent(),this._$calendarElement.hide(),this.constructor.enabledPicker=null},getDateObject:function(){return i.extend({},this._date)},getYear:function(){return this._date.year},getMonth:function(){return this._date.month},getDayInMonth:function(){return this._date.date},setDate:function(e,t,n){var a,r=this._date,s={};s.year=e||r.year,s.month=t||r.month,s.date=n||r.date,this._isRestricted(s)||i.extend(r,s),this._element&&(a=this._formed(),this._withTimePicker&&(a+=this._timePicker.getTime()),this._element.value=a),this._calendar.draw(r.year,r.month,!1)},setDateForm:function(e){this._dateForm=e||this._dateForm;var t="^",i=this._formOrder,r=0;this._dateForm.replace(n,function(e){var n=e.toLowerCase();t+=a[n].expression+"(?:[\\D\\s]*)",i[r]=a[n].type,r+=1}),this._regExp=new RegExp(t,"gi"),this.setDate()},getTimePicker:function(){return this._timePicker}})}(ne.component);
//# sourceMappingURL=data:application/json;base64,