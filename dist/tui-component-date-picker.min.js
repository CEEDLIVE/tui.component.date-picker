/*!
 * tui-component-date-picker.min.js
 * @version 1.6.0
 * @author NHNEnt FE Development Lab <dl_javascript@nhnent.com>
 * @license MIT
 */
!function(t){function e(i){if(n[i])return n[i].exports;var s=n[i]={exports:{},id:i,loaded:!1};return t[i].call(s.exports,s,s.exports,e),s.loaded=!0,s.exports}var n={};return e.m=t,e.c=n,e.p="dist",e(0)}([function(t,e,n){"use strict";var i=n(3),s=n(4),a=n(1);tui.util.defineNamespace("tui.component",{DatePicker:i,TimePicker:s,Spinbox:a})},function(t,e){"use strict";var n=tui.util,i=n.inArray,s=n.defineClass({init:function(t,e){this._$containerElement=$(t),this._$inputElement=this._$containerElement.find('input[type="text"]'),this._value=null,this._option=null,this._$upButton=null,this._$downButton=null,this._changeType="default",this._initialize(e)},_initialize:function(t){this._setOption(t),this._assignHTMLElements(),this._assignDefaultEvents(),this.setValue(this._option.defaultValue)},_setOption:function(t){if(this._option={defaultValue:0,step:1,max:Number.MAX_SAFE_INTEGER||9007199254740991,min:Number.MIN_SAFE_INTEGER||-9007199254740991,upBtnTag:'<button type="button"><b>+</b></button>',downBtnTag:'<button type="button"><b>-</b></button>'},n.extend(this._option,t),n.isArray(this._option.exclusion)||(this._option.exclusion=[]),!this._isValidOption())throw new Error("Spinbox option is invaild")},_isValidOption:function(){var t=this._option;return this._isValidValue(t.defaultValue)&&this._isValidStep(t.step)},_isValidValue:function(t){var e,s,a;return!!n.isNumber(t)&&(e=this._option,s=t<=e.max&&t>=e.min,a=i(t,e.exclusion)===-1,s&&a)},_isValidStep:function(t){var e=this._option.max-this._option.min;return n.isNumber(t)&&t<e},_assignHTMLElements:function(){this._setInputSizeAndMaxLength(),this._makeButton()},_makeButton:function(){var t=this._$inputElement,e=this._$upButton=$(this._option.upBtnTag),n=this._$downButton=$(this._option.downBtnTag);e.insertBefore(t),e.wrap("<div></div>"),n.insertAfter(t),n.wrap("<div></div>")},_setInputSizeAndMaxLength:function(){var t=this._$inputElement,e=String(this._option.min).length,n=String(this._option.max).length,i=Math.max(e,n);t.attr("size")||t.attr("size",i),t.attr("maxlength")||t.attr("maxlength",i)},_assignDefaultEvents:function(){var t=n.bind(this._onClickButton,this),e=n.bind(this._onKeyDownInputElement,this);this._$upButton.on("click",{isDown:!1},t),this._$downButton.on("click",{isDown:!0},t),this._$inputElement.on("keydown",e),this._$inputElement.on("change",n.bind(this._onChangeInput,this)),this._$inputElement.on("focus",n.bind(function(){this._changeType="default"},this))},_setNextValue:function(t){var e=this._option,n=e.step,s=e.min,a=e.max,o=e.exclusion,r=this.getValue();t&&(n=-n);do r+=n,r>a?r=s:r<s&&(r=a);while(i(r,o)>-1);this._changeType=t?"down":"up",this.setValue(r)},_onClickButton:function(t){this._setNextValue(t.data.isDown)},_onKeyDownInputElement:function(t){var e,n=t.which||t.keyCode;switch(n){case 38:e=!1;break;case 40:e=!0;break;default:return}this._setNextValue(e)},_onChangeInput:function(){var t=Number(this._$inputElement.val()),e=this._isValidValue(t)&&this._value!==t,n=e?t:this._value;this._value=n,this._$inputElement.val(n),this.fire("change",this._changeType)},setStep:function(t){this._isValidStep(t)&&(this._option.step=t)},getStep:function(){return this._option.step},getValue:function(){return this._value},setValue:function(t){this._$inputElement.val(t).change()},getOption:function(){return this._option},addExclusion:function(t){var e=this._option.exclusion;i(t,e)>-1||e.push(t)},removeExclusion:function(t){var e=this._option.exclusion,n=i(t,e);n!==-1&&e.splice(n,1)},getContainerElement:function(){return this._$containerElement[0]}});tui.util.CustomEvents.mixin(s),t.exports=s},function(t,e){"use strict";var n={getDateHash:function(t,e,n){var i;return arguments.length<3&&(i=arguments[0]||new Date,t=i.getFullYear(),e=i.getMonth()+1,n=i.getDate()),{year:t,month:e,date:n}},getToday:function(){return n.getDateHash()},getTime:function(t){return n.getDateObject(t).getTime()},getFirstDay:function(t,e){return new Date(t,e-1,1).getDay()},getLastDay:function(t,e){return new Date(t,e,0).getDay()},getLastDayInMonth:function(t,e){return new Date(t,e,0).getDate()},getDateObject:function(t){return 3===arguments.length?new Date(arguments[0],arguments[1]-1,arguments[2]):new Date(t.year,t.month-1,t.date)},getRelativeDate:function(t,e,i,s){var a=s.year+t,o=s.month+e-1,r=s.date+i,h=new Date(a,o,r);return n.getDateHash(h)},search:function(t,e){for(var n,i,s,a=!1,o=0,r=t.length-1;!a&&!n;)i=Math.floor((o+r)/2),s=t[i],s===e?a=!0:s<e?o=i+1:r=i-1,n=o>r;return{found:a,index:a||s>e?i:i+1}},getMeridiemHour:function(t){return t%=12,0===t&&(t=12),t},isEqualDateHash:function(t,e){return t.year===e.year&&t.month===e.month&&t.date===e.date},getSafeNumber:function(t,e){if(isNaN(e)||!tui.util.isNumber(e))throw Error("The defaultNumber must be a valid number.");return isNaN(t)?e:Number(t)}};t.exports=n},function(t,e,n){"use strict";var i=n(2),s=tui.util,a=s.extend,o=s.bind,r=s.forEach,h=s.isNumber,u=s.compareJSON,l=function(t,e,n){return n=n||1,Math.floor(t/n)>=Math.floor(e/n)},d=s.inArray,_=/yyyy|yy|mm|m|dd|d/gi,c={yyyy:{expression:"(\\d{4}|\\d{2})",type:"year"},yy:{expression:"(\\d{4}|\\d{2})",type:"year"},y:{expression:"(\\d{4}|\\d{2})",type:"year"},mm:{expression:"(1[012]|0[1-9]|[1-9]\\b)",type:"month"},m:{expression:"(1[012]|0[1-9]|[1-9]\\b)",type:"month"},dd:{expression:"([12]\\d{1}|3[01]|0[1-9]|[1-9]\\b)",type:"date"},d:{expression:"([12]\\d{1}|3[01]|0[1-9]|[1-9]\\b)",type:"date"}},m="date",p="month",f="year",g=1900,b=2999,y='<div style="position:absolute;"></div>',w=Number(new Date(0)),x=Number(new Date(2999,11,31)),v=31536e6,E=2628e6,D="relativeMonthValue",C=[m,p,f],S={left:"left",top:"bottom"},k=["dd","d"],T=["mm","m"],M=["yyyy","yy","y"],O=s.defineClass({init:function(t,e){t=a({dateFormat:"yyyy-mm-dd ",defaultCentury:"20",disabledClassName:"disabled",selectableClassName:"selectable",selectedClassName:"selected",selectableRanges:[],enableSetDateByEnterKey:!0,showAlways:!1,useTouchEvent:!0},t),this._calendar=e,this._$element=$(t.element),this._$wrapperElement=$(y),this._dateFormat=t.dateForm||t.dateFormat,this._regExp=null,this._formOrder=[],this._date=null,this._defaultCentury=t.defaultCentury,this._selectableClassName=t.selectableClassName,this._selectedClassName=t.selectedClassName,this._enableSetDateByEnterKey=t.enableSetDateByEnterKey,this._startTimes=[],this._endTimes=[],this._ranges=t.selectableRanges,this._timePicker=null,this._pos=null,this._openers=[],this._proxyHandlers={},this._shownLayerIdx=0,this._enabledState=!0,this._disabledClassName=t.disabledClassName,this.showAlways=t.showAlways,this.useTouchEvent=!(!("createTouch"in document||"ontouchstart"in document)||!t.useTouchEvent),this._initializeDatePicker(t)},_initializeDatePicker:function(t){this._ranges=this._filterValidRanges(this._ranges),this._detachCalendarEvent(),this._setSelectableRanges(),this._setWrapperElement(t.parentElement),this._setDefaultDate(t.date),this._setDefaultPosition(t.pos),this._setProxyHandlers(),this._setOpeners(t.openers),this._bindKeydownEvent(this._$element),this._setTimePicker(t.timePicker),this.setDateForm(),this._$wrapperElement.hide(),this._calendar.$element.show()},_filterValidRanges:function(t){var e,n;return s.filter(t,function(t){return e=t[0],n=t[1],this._setHashInRange(e,n),this._isValidDateHash(e)&&this._isValidDateHash(n)},this)},_detachCalendarEvent:function(){this._calendar.detachEventToBody()},_setWrapperElement:function(t){var e=this._$wrapperElement,n=$(t);e.append(this._calendar.$element),n[0]?e.appendTo(n):this._$element[0]?e.insertAfter(this._$element):e.appendTo(document.body)},_setDefaultDate:function(t){/^blank$/i.test(t)||(t=t?{year:i.getSafeNumber(t.year,g),month:i.getSafeNumber(t.month,1),date:i.getSafeNumber(t.date,1)}:i.getToday(),this._setShownLayerIndexByForm(),this._isSelectable(t,this._getCurrentLayer())&&(this._date=t))},_setDefaultPosition:function(t){var e=this._pos=t||{},n=this._getBoundingClientRect();h(e.zIndex)||(e.zIndex=9999),s.forEach(S,function(t,i){h(e[i])||(e[i]=n[t]||0)})},_setSelectableRanges:function(){this._startTimes=[],this._endTimes=[],r(this._ranges,function(t){this._updateTimeRange({start:i.getTime(t[0]),end:i.getTime(t[1])})},this)},_updateTimeRange:function(t){var e,n,i;e=this._searchStartTime(t.start).index,n={start:this._startTimes[e],end:this._endTimes[e]},this._isOverlappedTimeRange(n,t)?(i=this._mergeTimeRanges(n,t),this._startTimes.splice(e,1,i.start),this._endTimes.splice(e,1,i.end)):(this._startTimes.splice(e,0,t.start),this._endTimes.splice(e,0,t.end))},_isOverlappedTimeRange:function(t,e){var n=t.start,i=t.end,s=e.start,a=e.end,o=n&&i&&s&&a,r=!(s<n&&a<n||s>i&&a>i);return o&&r},_mergeTimeRanges:function(t,e){return{start:Math.min(t.start,e.start),end:Math.max(t.end,e.end)}},_searchStartTime:function(t){return i.search(this._startTimes,t)},_searchEndTime:function(t){return i.search(this._endTimes,t)},_setOpeners:function(t){this.addOpener(this._$element),r(t,function(t){this.addOpener(t)},this)},_setTimePicker:function(t){t&&(this._timePicker=t,this._bindCustomEventWithTimePicker())},_bindCustomEventWithTimePicker:function(){var t=o(this.setDate,this);this.on("open",function(){this._timePicker.setTimeFromInputElement(this._$element),this._timePicker.on("change",t)},this),this.on("close",function(){this._timePicker.off("change",t)},this)},_isValidYear:function(t){return h(t)&&t>=g&&t<=b},_isValidMonth:function(t){return h(t)&&t>0&&t<13},_isValidDayInMonth:function(t,e,n){return h(n)&&n>0&&n<=i.getLastDayInMonth(t,e)},_isValidDateHash:function(t){var e,n,i;return!!t&&(e=t.year||this._date.year,n=t.month||this._date.month,i=t.date||this._date.date,this._isValidYear(e)&&this._isValidMonth(n)&&this._isValidDayInMonth(e,n,i))},_isOpener:function(t){for(var e=!1,n=this._openers,i=0,s=n.length;i<s;i+=1)if(t===n[i]||$.contains(n[i],t)){e=!0;break}return e},_arrangeLayer:function(){var t=this._$wrapperElement[0].style,e=this._pos;t.left=e.left+"px",t.top=e.top+"px",t.zIndex=e.zIndex,this._$wrapperElement.append(this._calendar.$element),this._timePicker&&(this._$wrapperElement.append(this._timePicker.$timePickerElement),this._timePicker.show())},_getBoundingClientRect:function(t){var e,n,i=$(t)[0]||this._$element[0];return i?(e=i.getBoundingClientRect(),n=Math.ceil,{left:n(e.left),top:n(e.top),bottom:n(e.bottom),right:n(e.right)}):{}},_setDateFromString:function(t){var e=this._extractDate(t);e=a({},this._date,e),e&&this._isSelectable(e)?(this._timePicker&&this._timePicker.setTimeFromInputElement(this._$element),this.setDate(e.year,e.month,e.date)):this.setDate()},_makeDateString:function(){var t,e,n=this._date.year,i=this._date.month,s=this._date.date,a=this._dateFormat;return i=i<10?"0"+i:i,s=s<10?"0"+s:s,t={yyyy:n,yy:String(n).substr(2,2),mm:i,m:Number(i),dd:s,d:Number(s)},e=a.replace(_,function(e){return t[e.toLowerCase()]||""})},_extractDate:function(t){var e=this._formOrder,n={},i=this._regExp;return i.lastIndex=0,!!i.test(t)&&(e[0]&&(n[e[0]]=Number(RegExp.$1)),e[1]&&(n[e[1]]=Number(RegExp.$2)),e[2]&&(n[e[2]]=Number(RegExp.$3)),2===String(n.year).length&&(n.year=Number(this._defaultCentury+n.year)),n)},_isSelectable:function(t,e){var n,s,o,r,h=this._startTimes;switch(t=a({},t),e){case f:t.month=1,t.date=1,r=v;break;case p:t.date=1,r=E}return!!this._isValidDateHash(t)&&(!h.length||(o=i.getTime(t),s=this._searchEndTime(o),n=h[s.index],s.found||l(o,n,r)))},_setSelectableClassName:function(t,e,n){this._isSelectable(e,n)&&t.addClass(this._selectableClassName)},_setSelectedClassName:function(t,e,n){var s,a=this._date;switch(n){case p:e.date=a.date;break;case f:e.date=a.date,e.month=a.month}s=i.isEqualDateHash(a,e),s&&$(t).addClass(this._selectedClassName)},_setValueToInputElement:function(){var t,e;this._date&&(t=this._makeDateString(),e="",this._timePicker&&(e=this._timePicker.getTime()),this._$element.val(t+e))},_setRegExp:function(){var t="^",e=this._formOrder,n=this._dateFormat.match(_);s.forEach(n,function(n,i){n=n.toLowerCase(),t+=c[n].expression+"[\\D\\s]*",e[i]=c[n].type}),this._regExp=new RegExp(t,"gi")},_setProxyHandlers:function(){var t=this._proxyHandlers;t.onMousedownDocument=o(this._onMousedownDocument,this),t.onKeydownElement=o(this._onKeydownElement,this),t.onClickCalendar=o(this._onClickCalendar,this),t.onClickOpener=o(this._onClickOpener,this),t.onBeforeDrawCalendar=o(this._onBeforeDrawCalendar,this),t.onDrawCalendar=o(this._onDrawCalendar,this),t.onAfterDrawCalendar=o(this._onAfterDrawCalendar,this)},_onMousedownDocument:function(t){var e=$.contains(this._$wrapperElement[0],t.target);e||this._isOpener(t.target)||this.close()},_onKeydownElement:function(t){t&&13===t.keyCode&&this._setDateFromString(this._$element.val())},_onClickCalendar:function(t){var e,n,s=t.target,a=s.className,o=s.innerText||s.textContent||s.nodeValue,r=this._calendar.shownLayerIdx,h=this._calendar.getDate(),u=this._shownLayerIdx;if(n=a.indexOf("prev-month")>-1?-1:a.indexOf("next-month")>-1?1:$(s).data(D)||0,h.date=r?1:Number(o),e=i.getRelativeDate(0,n,0,h),u===r){if(this.setDate(e.year,e.month,e.date),!this.invoke("pick"))return;this.showAlways||this.close()}else this._calendar.draw(e.year,e.month,!1,r-1)},_onClickOpener:function(){var t=this.isOpened();t?this.close():this.open()},_onBeforeDrawCalendar:function(){this._unbindOnClickCalendar()},_onDrawCalendar:function(t){var e,n=t.$dateContainer,i=n.attr("class"),s={year:t.year,month:t.month||1,date:t.date||1};i.indexOf(m)>-1?e=m:i.indexOf(p)>-1?e=p:i.indexOf(f)>-1&&(e=f),this._setSelectableClassName(n,s,e),this._date&&this._setSelectedClassName(n,s,e)},_onAfterDrawCalendar:function(){this._showOnlyValidButtons(),this._bindOnClickCalendar()},_showOnlyValidButtons:function(){var t=this._calendar.$header,e=t.find('[class*="btn-prev"]').hide(),n=t.find('[class*="btn-next"]').hide(),i=this._getDiffTime();i.start>0&&e.show(),i.end>0&&n.show()},_bindKeydownEvent:function(t){this._enableSetDateByEnterKey&&t.on("keydown",this._proxyHandlers.onKeydownElement)},_unbindKeydownEvent:function(t){this._enableSetDateByEnterKey&&t.off("keydown",this._proxyHandlers.onKeydownElement)},_bindOnMousedownDocument:function(){var t=this.useTouchEvent?"touchstart":"mousedown";$(document).on(t,this._proxyHandlers.onMousedownDocument)},_unbindOnMousedownDocument:function(){$(document).off("mousedown touchstart",this._proxyHandlers.onMousedownDocument)},_bindOnClickCalendar:function(){var t=this._proxyHandlers.onClickCalendar,e=this.useTouchEvent?"touchend":"click";this._$wrapperElement.find("."+this._selectableClassName).on(e,t)},_unbindOnClickCalendar:function(){var t=this._proxyHandlers.onClickCalendar;this._$wrapperElement.find("."+this._selectableClassName).off("click touchend",t)},_bindCalendarCustomEvent:function(){var t=this._proxyHandlers,e=t.onBeforeDrawCalendar,n=t.onDrawCalendar,i=t.onAfterDrawCalendar;this._calendar.on({beforeDraw:e,draw:n,afterDraw:i})},_unbindCalendarCustomEvent:function(){var t=this._proxyHandlers,e=t.onBeforeDrawCalendar,n=t.onDrawCalendar,i=t.onAfterDrawCalendar;this._calendar.off({beforeDraw:e,draw:n,afterDraw:i})},_bindOnClickOpener:function(t){var e=this.useTouchEvent?"touchend":"click";$(t).on(e,this._proxyHandlers.onClickOpener)},_unbindOnClickOpener:function(t){var e=this.useTouchEvent?"touchend":"click";$(t).on(e,this._proxyHandlers.onClickOpener)},_getCurrentLayer:function(){return C[this._shownLayerIdx]},_shouldShowLayer:function(t){var e,n=this._dateFormat.match(_),i=function(t){return n.indexOf(t)>-1};switch(t){case m:e=k;break;case p:e=T;break;case f:e=M;break;default:return!1}return!!s.filter(e,i).length},_setShownLayerIndexByForm:function(){var t=0;this._shouldShowLayer(f)&&(t=C.indexOf(f)),this._shouldShowLayer(p)&&(t=C.indexOf(p)),this._shouldShowLayer(m)&&(t=C.indexOf(m)),this._shownLayerIdx=t},_setHashInRange:function(t,e){t.month=t.month||1,e.month=e.month||12,t.date=t.date||1,e.date=e.date||i.getLastDayInMonth(e.year,e.month)},_getDiffTime:function(){var t,e,n,i,s,a=this._calendar.shownLayerIdx,o=this._calendar.getDate(),r=new Date(o.year,o.month-1),h=new Date(this._startTimes[0]||w).setDate(1),u=new Date(this._endTimes.slice(-1)[0]||x).setDate(1);return 0===a?(i=r-h,s=u-r):1===a?(e=new Date(r).setMonth(0),n=new Date(r).setMonth(11),i=e-h,s=u-n):2===a&&(t=this._calendar._getInfoOfYearRange(o.year),e=Number(new Date(t.startYear,0)),n=Number(new Date(t.endYear,0)),h=new Date(h).setMonth(0),u=new Date(u).setMonth(0),i=e-h,s=u-n),{start:i,end:s}},addRange:function(t,e){t=a({},t),e=a({},e),this._setHashInRange(t,e),this._isValidDateHash(t)&&this._isValidDateHash(e)&&(this._ranges.push([t,e]),this._setSelectableRanges(),this._calendar.draw(0,0,!1,this._shownLayerIdx))},removeRange:function(t,e){var n,i=this._ranges,s=0,o=i.length;for(t=a({},t),e=a({},e),this._setHashInRange(t,e),n=[t,e];s<o;s+=1)if(u(n,i[s])){i.splice(s,1);break}this._setSelectableRanges(),this._calendar.draw(0,0,!1,this._shownLayerIdx)},setRanges:function(t){this._ranges=this._filterValidRanges(t),this._setSelectableRanges()},setXY:function(t,e){var n=this._pos;n.left=h(t)?t:n.left,n.top=h(e)?e:n.top,this._arrangeLayer()},setZIndex:function(t){h(t)&&(this._pos.zIndex=t,this._arrangeLayer())},addOpener:function(t){var e=this.useTouchEvent?"touchend":"click",n=$(t);t=n[0],t&&d(t,this._openers)<0&&(this._openers.push(t),n.on(e,this._proxyHandlers.onClickOpener))},removeOpener:function(t){var e=$(t),n=d(e[0],this._openers);n>-1&&(e.off("click touchend",this._proxyHandlers.onClickOpener),this._openers.splice(n,1))},open:function(){var t;!this.isOpened()&&this._enabledState&&(t=this._date||i.getToday(),this._arrangeLayer(),this._bindCalendarCustomEvent(),this._calendar.draw(t.year,t.month,!1,this._shownLayerIdx),this._$wrapperElement.show(),this.showAlways||this._bindOnMousedownDocument(),this.fire("open"))},close:function(){this.isOpened()&&(this._unbindCalendarCustomEvent(),this._unbindOnMousedownDocument(),this._$wrapperElement.hide(),this.fire("close"))},getDateHash:function(){var t,e;return this._date?(t={},e=this._shownLayerIdx,a(t,this._date),e>1&&delete t.month,e>0&&delete t.date,t):null},getYear:function(){return this._date.year},getMonth:function(){return this._date.month},getDayInMonth:function(){return this._date.date},setDate:function(t,e,n){var s=this._date||i.getToday(),o=a({},this._date),r=this._getCurrentLayer(),h={year:t||s.year,month:e||s.month,date:n||s.date},u=this._isSelectable(h,r)&&!i.isEqualDateHash(o,h);u?(this._date=h,this._setValueToInputElement(),this._calendar.draw(h.year,h.month,!1,r),this.fire("update")):this._setValueToInputElement()},setDateForm:function(t){this._dateFormat=t||this._dateFormat,this._setShownLayerIndexByForm(),this._setRegExp(),this._date&&this.setDate()},isOpened:function(){return"block"===this._$wrapperElement.css("display")},getTimePicker:function(){return this._timePicker},setElement:function(t){var e=this._$element,n=$(t);e[0]&&(this.removeOpener(e),this._unbindKeydownEvent(e)),this.addOpener(n),this._bindKeydownEvent(n),this._setDateFromString(n.val()),this._$element=n},enable:function(){var t;this._enabledState||(this._enabledState=!0,r(this._openers,function(e,n){t=$(e),t.removeAttr("disabled"),t.removeClass(this._disabledClassName),this._bindOnClickOpener(t),n||this._bindKeydownEvent(t)},this))},disable:function(){var t;this._enabledState&&(this._enabledState=!1,this.close(),r(this._openers,function(e,n){t=$(e),t.addClass(this._disabledClassName),t.prop("disabled",!0),this._unbindOnClickOpener(t),n||this._unbindKeydownEvent(t)},this))},destroy:function(){var t=this._$element;t[0]&&this._unbindKeydownEvent(t),this._unbindOnMousedownDocument(),this._unbindOnClickCalendar(),this._unbindCalendarCustomEvent(),this._$wrapperElement.remove()}});s.CustomEvents.mixin(O),t.exports=O},function(t,e,n){"use strict";var i=n(1),s=n(2),a=tui.util,o=/\s*(\d{1,2})\s*:\s*(\d{1,2})\s*([ap][m])?(?:[\s\S]*)/i,r=/\s+|:/g,h='<table class="timepicker"><tr class="timepicker-row"></tr></table>',u='<td class="timepicker-column"></td>',l='<td class="timepicker-column timepicker-spinbox"><div><input type="text" class="timepicker-spinbox-input"></div></td>',d='<button type="button" class="timepicker-btn timepicker-btn-up"><b>+</b></button>',_='<button type="button" class="timepicker-btn timepicker-btn-down"><b>-</b></button>',c='<select><option value="AM">AM</option><option value="PM">PM</option></select>',m=a.defineClass({init:function(t){this.$timePickerElement=null,this._$inputElement=null,this._$meridianElement=null,this._hourSpinbox=null,this._minuteSpinbox=null,this._isShown=!1,this._option=null,this._hour=null,this._minute=null,this._initialize(t)},_initialize:function(t){this._setOption(t),this._makeSpinboxes(),this._makeTimePickerElement(),this._assignDefaultEvents(),this._setTime(this._option.defaultHour,this._option.defaultMinute,!1)},_setOption:function(t){this._option={defaultHour:0,defaultMinute:0,inputElement:null,hourStep:1,minuteStep:1,hourExclusion:null,minuteExclusion:null,showMeridian:!1,position:{}},a.extend(this._option,t)},_makeSpinboxes:function(){var t=this._option,e=t.defaultHour;t.showMeridian&&(e=s.getMeridiemHour(e)),this._hourSpinbox=new i(l,{defaultValue:e,min:t.showMeridian?1:0,max:t.showMeridian?12:23,step:t.hourStep,upBtnTag:d,downBtnTag:_,exclusion:t.hourExclusion}),this._minuteSpinbox=new i(l,{defaultValue:t.defaultMinute,min:0,max:59,step:t.minuteStep,upBtnTag:d,downBtnTag:_,exclusion:t.minuteExclusion})},_makeTimePickerElement:function(){var t,e=this._option,n=$(h),i=n.find(".timepicker-row"),s=$(u).addClass("colon").append(":");i.append(this._hourSpinbox.getContainerElement(),s,this._minuteSpinbox.getContainerElement()),e.showMeridian&&(t=$(u).addClass("meridian").append(c),this._$meridianElement=t.find("select").eq(0),i.append(t)),n.hide(),$("body").append(n),this.$timePickerElement=n,e.inputElement&&(n.css("position","absolute"),this._$inputElement=$(e.inputElement),this._setDefaultPosition(this._$inputElement))},_setDefaultPosition:function(t){var e=t[0],n=this._option.position,i=n.x,s=n.y;a.isNumber(i)&&a.isNumber(s)||(i=e.offsetLeft,s=e.offsetTop+e.offsetHeight+3),this.setXYPosition(i,s)},_assignDefaultEvents:function(){var t=this._$inputElement;t&&(this._assignEventsToInputElement(),this.on("change",function(){t.val(this.getTime())},this)),this._hourSpinbox.on("change",a.bind(this._onChangeSpinbox,this)),this._minuteSpinbox.on("change",a.bind(this._onChangeSpinbox,this)),this.$timePickerElement.on("change","select",a.bind(this._onChangeMeridiem,this))},_assignEventsToInputElement:function(){var t=this,e=this._$inputElement;e.on("click",function(e){t.open(e)}),e.on("change",function(){t.setTimeFromInputElement()||e.val(t.getTime())})},_onChangeSpinbox:function(t){var e=this._hourSpinbox.getValue(),n=this._minuteSpinbox.getValue();this._option.showMeridian&&(("up"===t&&12===e||"down"===t&&11===e)&&(this._isPM=!this._isPM),e=this._getOriginalHour(e)),this._setTime(e,n,!1)},_onChangeMeridiem:function(t){var e="PM"===t.target.value,n=this._hour,i=e?n+12:n%12;this._setTime(i,this._minuteSpinbox.getValue(),!1)},_isClickedInside:function(t){var e=$.contains(this.$timePickerElement[0],t.target),n=this._$inputElement&&this._$inputElement[0]===t.target;return e||n},_formToTimeFormat:function(){var t,e,n=this._hour,i=this._minute,a=this._getPostfix();return this._option.showMeridian&&(n=s.getMeridiemHour(n)),t=n<10?"0"+n:n,e=i<10?"0"+i:i,t+":"+e+a},_setIsPM:function(){this._isPM=this._hour>11},_getPostfix:function(){var t="";return this._option.showMeridian&&(t=this._isPM?" PM":" AM"),t},setXYPosition:function(t,e){a.isNumber(t)&&a.isNumber(e)&&(a.extend(this._option.position,{x:t,y:e}),this.$timePickerElement.css({left:t,top:e}))},show:function(){this.$timePickerElement.show(),this._isShown=!0},hide:function(){this.$timePickerElement.hide(),this._isShown=!1},open:function(t){this._isShown||($(document).on("click",a.bind(this.close,this)),this.show(),this.fire("open",t))},close:function(t){this._isShown&&!this._isClickedInside(t)&&($(document).off(t),this.hide(),this.fire("close",t))},toSpinboxes:function(){var t=this._hour,e=this._minute;this._option.showMeridian&&(t=s.getMeridiemHour(t)),this._hourSpinbox.setValue(t),this._minuteSpinbox.setValue(e)},_getOriginalHour:function(t){var e=this._isPM;return t=e?t<12?t+12:12:t<12?t%12:0},setTimeFromInputElement:function(t){var e=$(t)[0]||this._$inputElement[0];return!(!e||!this.setTimeFromString(e.value))},setHour:function(t){return this._setTime(t,this._minute,!0)},setMinute:function(t){return this._setTime(this._hour,t,!0)},setTime:function(t,e){return this._setTime(t,e)},_setTime:function(t,e,n){var i,s=a.isNumber(t)&&a.isNumber(e),o=t<24&&e<60;return!(!s||!o)&&(this._hour=t,this._minute=e,this._setIsPM(),n&&this.toSpinboxes(),this._$meridianElement&&(i=this._getPostfix().replace(/\s+/,""),this._$meridianElement.val(i)),this.fire("change",n),!0)},setTimeFromString:function(t){var e,n,i,s,a;return o.test(t)&&(e=t.split(r),n=Number(e[0]),i=Number(e[1]),n<24&&this._option.showMeridian&&(s=e[2].toUpperCase(),a="PM"===s||("AM"===s?n>12:this._isPM),a&&n<12?n+=12:a||12!==n||(n=0))),this._setTime(n,i,!0)},setHourStep:function(t){this._hourSpinbox.setStep(t),this._option.hourStep=this._hourSpinbox.getStep()},setMinuteStep:function(t){this._minuteSpinbox.setStep(t),this._option.minuteStep=this._minuteSpinbox.getStep()},addHourExclusion:function(t){this._hourSpinbox.addExclusion(t)},addMinuteExclusion:function(t){this._minuteSpinbox.addExclusion(t)},getHourStep:function(){return this._option.hourStep},getMinuteStep:function(){return this._option.minuteStep},removeHourExclusion:function(t){this._hourSpinbox.removeExclusion(t)},removeMinuteExclusion:function(t){this._minuteSpinbox.removeExclusion(t)},getHour:function(){return this._hour},getMinute:function(){return this._minute},getTime:function(){return this._formToTimeFormat()}});tui.util.CustomEvents.mixin(m),t.exports=m}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,