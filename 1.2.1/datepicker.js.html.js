tui.util.defineNamespace("fedoc.content", {});
fedoc.content["datepicker.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * Created by nhnent on 15. 5. 14..\n * @fileoverview This component provides a calendar for picking a date &amp; time.\n * @author NHN ent FE dev &lt;dl_javascript@nhnent.com> &lt;minkyu.yi@nhnent.com>\n * @dependency jquery-1.8.3, code-snippet-1.0.2, component-calendar-1.0.1, timePicker.js\n */\n\n'use strict';\n\nvar utils = require('./utils');\n\nvar inArray = tui.util.inArray,\n    formatRegExp = /yyyy|yy|mm|m|dd|d/gi,\n    mapForConverting = {\n        yyyy: {expression: '(\\\\d{4}|\\\\d{2})', type: 'year'},\n        yy: {expression: '(\\\\d{4}|\\\\d{2})', type: 'year'},\n        y: {expression: '(\\\\d{4}|\\\\d{2})', type: 'year'},\n        mm: {expression: '(1[012]|0[1-9]|[1-9]\\\\b)', type: 'month'},\n        m: {expression: '(1[012]|0[1-9]|[1-9]\\\\b)', type: 'month'},\n        dd: {expression: '([12]\\\\d{1}|3[01]|0[1-9]|[1-9]\\\\b)', type: 'date'},\n        d: {expression: '([12]\\\\d{1}|3[01]|0[1-9]|[1-9]\\\\b)', type: 'date'}\n    },\n    CONSTANTS = {\n        MIN_YEAR: 1970,\n        MAX_YEAR: 2999,\n        MONTH_DAYS: [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n        WRAPPER_TAG: '&lt;div style=\"position:absolute;\">&lt;/div>',\n        MIN_EDGE: +new Date(0),\n        MAX_EDGE: +new Date(2999, 11, 31),\n        YEAR_TO_MS: 31536000000\n    };\n\n/**\n * A number, or a string containing a number.\n * @typedef {Object} dateHash\n * @property {number} year - 1970~2999\n * @property {number} month - 1~12\n * @property {number} date - 1~31\n */\n\n/**\n * Create DatePicker&lt;br>\n * You can get a date from 'getYear', 'getMonth', 'getDayInMonth', 'getDateHash'\n * @constructor\n * @param {Object} option - options for DatePicker\n *      @param {HTMLElement|string} option.element - input element(or selector) of DatePicker\n *      @param {dateHash} [option.date = today] - initial date object\n *      @param {string} [option.dateForm = 'yyyy-mm-dd'] - format of date string\n *      @param {string} [option.defaultCentury = 20] - if year-format is yy, this value is prepended automatically.\n *      @param {string} [option.selectableClassName = 'selectable'] - for selectable date elements\n *      @param {string} [option.selectedClassName = 'selected'] - for selected date element\n *      @param {Array.&lt;Array.&lt;dateHash>>} [options.selectableRanges] - Selectable date ranges, See example\n *      @param {Object} [option.pos] - calendar position style value\n *          @param {number} [option.pos.left] - position left of calendar\n *          @param {number} [option.pos.top] - position top of calendar\n *          @param {number} [option.pos.zIndex] - z-index of calendar\n *      @param {Object} [option.openers = [element]] - opener button list (example - icon, button, etc.)\n *      @param {boolean} [option.showAlways = false] - whether the datepicker shows the calendar always\n *      @param {boolean} [option.useTouchEvent = true] - whether the datepicker uses touch events\n *      @param {tui.component.TimePicker} [option.timePicker] - TimePicker instance\n * @param {tui.component.Calendar} calendar - Calendar instance\n * @example\n *   var calendar = new tui.component.Calendar({\n *       element: '#layer',\n *       titleFormat: 'yyyy년 m월',\n *       todayFormat: 'yyyy년 mm월 dd일 (D)'\n *   });\n *\n *   var timePicker = new tui.component.TimePicker({\n *       showMeridian: true,\n *       defaultHour: 13,\n *       defaultMinute: 24\n *   });\n *\n *   var range1 = [\n *          {year: 2015, month:1, date: 1},\n *          {year: 2015, month:2, date: 1}\n *      ],\n *      range2 = [\n *          {year: 2015, month:3, date: 1},\n *          {year: 2015, month:4, date: 1}\n *      ],\n *      range3 = [\n *          {year: 2015, month:6, date: 1},\n *          {year: 2015, month:7, date: 1}\n *      ];\n *\n *   var picker1 = new tui.component.DatePicker({\n *       element: '#picker',\n *       dateForm: 'yyyy년 mm월 dd일 - ',\n *       date: {year: 2015, month: 1, date: 1 },\n *       selectableRanges: [range1, range2, range3],\n *       openers: ['#opener'],\n *       timePicker: timePicker\n *   }, calendar);\n *\n *   // Close calendar when select a date\n *   $('#layer').on('click', function(event) {\n *       var $el = $(event.target);\n *\n *       if ($el.hasClass('selectable')) {\n *           picker1.close();\n *       }\n *   });\n */\nvar DatePicker = tui.util.defineClass(/** @lends DatePicker.prototype */{\n    init: function(option, calendar) {\n        // set defaults\n        option = tui.util.extend({\n            dateForm: 'yyyy-mm-dd ',\n            defaultCentury: '20',\n            selectableClassName: 'selectable',\n            selectedClassName: 'selected',\n            selectableRanges: [],\n            showAlways: false,\n            useTouchEvent: true\n        }, option);\n\n        /**\n         * Calendar instance\n         * @type {Calendar}\n         * @private\n         */\n        this._calendar = calendar;\n\n        /**\n         * Element for displaying a date value\n         * @type {HTMLElement}\n         * @private\n         */\n        this._$element = $(option.element);\n\n        /**\n         * Element wrapping calendar\n         * @type {HTMLElement}\n         * @private\n         */\n        this._$wrapperElement = $(CONSTANTS.WRAPPER_TAG);\n\n        /**\n         * Format of date string\n         * @type {string}\n         * @private\n         */\n        this._dateForm = option.dateForm;\n\n        /**\n         * RegExp instance for format of date string\n         * @type {RegExp}\n         * @private\n         */\n        this._regExp = null;\n\n        /**\n         * Array saving a order of format\n         * @type {Array}\n         * @private\n         * @see {tui.component.DatePicker.prototype.setDateForm}\n         * @example\n         * // If the format is a 'mm-dd, yyyy'\n         * // `this._formOrder` is ['month', 'date', 'year']\n         */\n        this._formOrder = [];\n\n        /**\n         * Object having date values\n         * @type {dateHash}\n         * @private\n         */\n        this._date = null;\n\n        /**\n         * This value is prepended automatically when year-format is 'yy'\n         * @type {string}\n         * @private\n         * @example\n         * //\n         * // If this value is '20', the format is 'yy-mm-dd' and the date string is '15-04-12',\n         * // the date value object is\n         * //  {\n         * //      year: 2015,\n         * //      month: 4,\n         * //      date: 12\n         * //  }\n         */\n        this._defaultCentury = option.defaultCentury;\n\n        /**\n         * Class name for selectable date elements\n         * @type {string}\n         * @private\n         */\n        this._selectableClassName = option.selectableClassName;\n\n        /**\n         * Class name for selected date element\n         * @type {string}\n         * @private\n         */\n        this._selectedClassName = option.selectedClassName;\n\n        /**\n         * It is start timestamps from this._ranges\n         * @type {Array.&lt;number>}\n         * @since 1.2.0\n         * @private\n         */\n        this._startTimes = [];\n\n        /**\n         * It is end timestamps from this._ranges\n         * @type {Array.&lt;number>}\n         * @since 1.2.0\n         * @private\n         */\n        this._endTimes = [];\n\n        /**\n         * Selectable date ranges\n         * @type {Array.&lt;Array.&lt;dateHash>>}\n         * @private\n         * @since 1.2.0\n         */\n        this._ranges = option.selectableRanges;\n\n        /**\n         * TimePicker instance\n         * @type {TimePicker}\n         * @since 1.1.0\n         * @private\n         */\n        this._timePicker = null;\n\n        /**\n         * position - left &amp; top &amp; zIndex\n         * @type {Object}\n         * @private\n         * @since 1.1.1\n         */\n        this._pos = null;\n\n        /**\n         * openers - opener list\n         * @type {Array}\n         * @private\n         * @since 1.1.1\n         */\n        this._openers = [];\n\n        /**\n         * Handlers binding context\n         * @type {Object}\n         * @private\n         */\n        this._proxyHandlers = {};\n\n        /**\n         * Whether the datepicker shows always\n         * @api\n         * @type {boolean}\n         * @since 1.2.0\n         * @example\n         * datepicker.showAlways = true;\n         * datepicker.open();\n         * // The datepicker will be not closed if you click the outside of the datepicker\n         */\n        this.showAlways = option.showAlways;\n\n        /**\n         * Whether the datepicker use touch event.\n         * @api\n         * @type {boolean}\n         * @since 1.2.0\n         * @example\n         * datepicker.useTouchEvent = false;\n         * // The datepicker will be use only 'click', 'mousedown' events\n         */\n        this.useTouchEvent = !!(\n            (('createTouch' in document) || ('ontouchstart' in document)) &amp;&amp;\n            option.useTouchEvent\n        );\n\n        this._initializeDatePicker(option);\n    },\n\n    /**\n     * Initialize method\n     * @param {Object} option - user option\n     * @private\n     */\n    _initializeDatePicker: function(option) {\n        this._ranges = tui.util.filter(this._ranges, function(range) {\n            return (this._isValidDate(range[0]) &amp;&amp; this._isValidDate(range[1]));\n        }, this);\n\n        this._setSelectableRanges();\n        this._setWrapperElement();\n        this._setDefaultDate(option.date);\n        this._setDefaultPosition(option.pos);\n        this._setProxyHandlers();\n        this._bindOpenerEvent(option.openers);\n        this._setTimePicker(option.timePicker);\n        this.setDateForm();\n        this._$wrapperElement.hide();\n    },\n\n    /**\n     * Set wrapper element(= container)\n     * @private\n     */\n    _setWrapperElement: function() {\n        var $wrapperElement = this._$wrapperElement;\n\n        $wrapperElement.append(this._calendar.$element);\n        if (this._$element[0]) {\n            $wrapperElement.insertAfter(this._$element);\n        } else {\n            $wrapperElement.appendTo(document.body);\n        }\n    },\n\n    /**\n     * Set default date\n     * @param {{year: number, month: number, date: number}|Date} opDate [option.date] - user setting: date\n     * @private\n     */\n    _setDefaultDate: function(opDate) {\n        var isNumber = tui.util.isNumber;\n\n        if (!opDate) {\n            this._date = utils.getToday();\n        } else {\n            this._date = {\n                year: isNumber(opDate.year) ? opDate.year : CONSTANTS.MIN_YEAR,\n                month: isNumber(opDate.month) ? opDate.month : 1,\n                date: isNumber(opDate.date) ? opDate.date : 1\n            };\n        }\n    },\n\n    /**\n     * Save default style-position of calendar\n     * @param {Object} opPos [option.pos] - user setting: position(left, top, zIndex)\n     * @private\n     */\n    _setDefaultPosition: function(opPos) {\n        var pos = this._pos = opPos || {},\n            bound = this._getBoundingClientRect();\n\n        pos.left = pos.left || bound.left || 0;\n        pos.top = pos.top || bound.bottom || 0;\n        pos.zIndex = pos.zIndex || 9999;\n    },\n\n    /**\n     * Set start/end edge from selectable-ranges\n     * @private\n     */\n    _setSelectableRanges: function() {\n        this._startTimes = [];\n        this._endTimes = [];\n\n        tui.util.forEach(this._ranges, function(range) {\n            this._updateTimeRange({\n                start: utils.getTime(range[0]),\n                end: utils.getTime(range[1])\n            });\n        }, this);\n    },\n\n    /**\n     * Update time range (startTimes, endTimes)\n     * @param {{start: number, end: number}} newTimeRange - Time range for update\n     * @private\n     */\n    _updateTimeRange: function(newTimeRange) {\n        var index, existingTimeRange, mergedTimeRange;\n\n        index = this._searchStartTime(newTimeRange.start).index;\n        existingTimeRange = {\n            start: this._startTimes[index],\n            end: this._endTimes[index]\n        };\n\n        if (this._isOverlappedTimeRange(existingTimeRange, newTimeRange)) {\n            mergedTimeRange = this._mergeTimeRanges(existingTimeRange, newTimeRange);\n            this._startTimes.splice(index, 1, mergedTimeRange.start);\n            this._endTimes.splice(index, 1, mergedTimeRange.end);\n        } else {\n            this._startTimes.splice(index, 0, newTimeRange.start);\n            this._endTimes.splice(index, 0, newTimeRange.end);\n        }\n    },\n\n    /**\n     * Whether the ranges are overlapped\n     * @param {{start: number, end: number}} existingTimeRange - Existing time range\n     * @param {{start: number, end: number}} newTimeRange - New time range\n     * @returns {boolean} Whether the ranges are overlapped\n     * @private\n     */\n    _isOverlappedTimeRange: function(existingTimeRange, newTimeRange) {\n        var existingStart = existingTimeRange.start,\n            existingEnd = existingTimeRange.end,\n            newStart = newTimeRange.start,\n            newEnd = newTimeRange.end,\n            isTruthy = existingStart &amp;&amp; existingEnd &amp;&amp; newStart &amp;&amp; newEnd,\n            isOverlapped = !(\n                (newStart &lt; existingStart &amp;&amp; newEnd &lt; existingStart) ||\n                (newStart > existingEnd &amp;&amp; newEnd > existingEnd)\n            );\n\n        return isTruthy &amp;&amp; isOverlapped;\n    },\n\n    /**\n     * Merge the overlapped time ranges\n     * @param {{start: number, end: number}} existingTimeRange - Existing time range\n     * @param {{start: number, end: number}} newTimeRange - New time range\n     * @returns {{start: number, end: number}} Merged time range\n     * @private\n     */\n    _mergeTimeRanges: function(existingTimeRange, newTimeRange) {\n        return {\n            start: Math.min(existingTimeRange.start, newTimeRange.start),\n            end: Math.max(existingTimeRange.end, newTimeRange.end)\n        };\n    },\n\n    /**\n     * Search timestamp in startTimes\n     * @param {number} timestamp - timestamp\n     * @returns {{found: boolean, index: number}} result\n     * @private\n     */\n    _searchStartTime: function(timestamp) {\n        return utils.search(this._startTimes, timestamp);\n    },\n\n    /**\n     * Search timestamp in endTimes\n     * @param {number} timestamp - timestamp\n     * @returns {{found: boolean, index: number}} result\n     */\n    _searchEndTime: function(timestamp) {\n        return utils.search(this._endTimes, timestamp);\n    },\n\n    /**\n     * Store opener element list\n     * @param {Array} opOpeners [option.openers] - opener element list\n     * @private\n     */\n    _setOpeners: function(opOpeners) {\n        this.addOpener(this._$element);\n        tui.util.forEach(opOpeners, function(opener) {\n            this.addOpener(opener);\n        }, this);\n    },\n\n    /**\n     * Set TimePicker instance\n     * @param {tui.component.TimePicker} [opTimePicker] - TimePicker instance\n     * @private\n     */\n    _setTimePicker: function(opTimePicker) {\n        if (!opTimePicker) {\n            return;\n        }\n\n        this._timePicker = opTimePicker;\n        this._bindCustomEventWithTimePicker();\n    },\n\n    /**\n     * Bind custom event with TimePicker\n     * @private\n     */\n    _bindCustomEventWithTimePicker: function() {\n        var onChangeTimePicker = tui.util.bind(this.setDate, this);\n\n        this.on('open', function() {\n            this._timePicker.setTimeFromInputElement(this._$element);\n            this._timePicker.on('change', onChangeTimePicker);\n        }, this);\n        this.on('close', function() {\n            this._timePicker.off('change', onChangeTimePicker);\n        }, this);\n    },\n\n    /**\n     * Check validation of a year\n     * @param {number} year - year\n     * @returns {boolean} - whether the year is valid or not\n     * @private\n     */\n    _isValidYear: function(year) {\n        return tui.util.isNumber(year) &amp;&amp; year > CONSTANTS.MIN_YEAR &amp;&amp; year &lt; CONSTANTS.MAX_YEAR;\n    },\n\n    /**\n     * Check validation of a month\n     * @param {number} month - month\n     * @returns {boolean} - whether the month is valid or not\n     * @private\n     */\n    _isValidMonth: function(month) {\n        return tui.util.isNumber(month) &amp;&amp; month > 0 &amp;&amp; month &lt; 13;\n    },\n\n    /**\n     * Check validation of values in a date object having year, month, day-in-month\n     * @param {dateHash} dateHash - dateHash\n     * @returns {boolean} - whether the date object is valid or not\n     * @private\n     */\n    _isValidDate: function(datehash) {\n        var year, month, date, isLeapYear, lastDayInMonth, isBetween;\n\n        if (!datehash) {\n            return false;\n        }\n\n        year = datehash.year;\n        month = datehash.month;\n        date = datehash.date;\n        isLeapYear = (year % 4 === 0) &amp;&amp; (year % 100 !== 0) || (year % 400 === 0);\n        if (!this._isValidYear(year) || !this._isValidMonth(month)) {\n            return false;\n        }\n\n        lastDayInMonth = CONSTANTS.MONTH_DAYS[month];\n        if (isLeapYear &amp;&amp; month === 2) {\n                lastDayInMonth = 29;\n        }\n        isBetween = !!(tui.util.isNumber(date) &amp;&amp; (date > 0) &amp;&amp; (date &lt;= lastDayInMonth));\n\n        return isBetween;\n    },\n\n    /**\n     * Check an element is an opener.\n     * @param {HTMLElement} target element\n     * @returns {boolean} - opener true/false\n     * @private\n     */\n    _isOpener: function(target) {\n        var result = false;\n\n        tui.util.forEach(this._openers, function(opener) {\n            if (target === opener || $.contains(opener, target)) {\n                result = true;\n                return false;\n            }\n        });\n        return result;\n    },\n\n    /**\n     * Set style-position of calendar\n     * @private\n     */\n    _arrangeLayer: function() {\n        var style = this._$wrapperElement[0].style,\n            pos = this._pos;\n\n        style.left = pos.left + 'px';\n        style.top = pos.top + 'px';\n        style.zIndex = pos.zIndex;\n        this._$wrapperElement.append(this._calendar.$element);\n        if (this._timePicker) {\n            this._$wrapperElement.append(this._timePicker.$timePickerElement);\n            this._timePicker.show();\n        }\n    },\n\n    /**\n     * Get boundingClientRect of an element\n     * @param {HTMLElement|jQuery} [element] - element\n     * @returns {Object} - an object having left, top, bottom, right of element\n     * @private\n     */\n    _getBoundingClientRect: function(element) {\n        var el = $(element)[0] || this._$element[0],\n            bound,\n            ceil;\n\n        if (!el) {\n            return {};\n        }\n\n        bound = el.getBoundingClientRect();\n        ceil = Math.ceil;\n        return {\n            left: ceil(bound.left),\n            top: ceil(bound.top),\n            bottom: ceil(bound.bottom),\n            right: ceil(bound.right)\n        };\n    },\n\n    /**\n     * Set date from string\n     * @param {string} str - date string\n     * @private\n     */\n    _setDateFromString: function(str) {\n        var date = this._extractDate(str);\n\n        if (date &amp;&amp; this._isSelectable(date)) {\n            if (this._timePicker) {\n                this._timePicker.setTimeFromInputElement(this._$element);\n            }\n            this.setDate(date.year, date.month, date.date);\n        } else {\n            this.setDate();\n        }\n    },\n\n    /**\n     * Return formed date-string from date object\n     * @return {string} - formed date-string\n     * @private\n     */\n    _formed: function() {\n        var year = this._date.year,\n            month = this._date.month,\n            date = this._date.date,\n            form = this._dateForm,\n            replaceMap,\n            dateString;\n\n        month = month &lt; 10 ? ('0' + month) : month;\n        date = date &lt; 10 ? ('0' + date) : date;\n\n        replaceMap = {\n            yyyy: year,\n            yy: String(year).substr(2, 2),\n            mm: month,\n            m: Number(month),\n            dd: date,\n            d: Number(date)\n        };\n\n        dateString = form.replace(formatRegExp, function(key) {\n            return replaceMap[key.toLowerCase()] || '';\n        });\n\n        return dateString;\n    },\n\n    /**\n     * Extract date-object from input string with comparing date-format&lt;br>\n     * If can not extract, return false\n     * @param {String} str - input string(text)\n     * @returns {dateHash|false} - extracted date object or false\n     * @private\n     */\n    _extractDate: function(str) {\n        var formOrder = this._formOrder,\n            resultDate = {},\n            regExp = this._regExp;\n\n        regExp.lastIndex = 0;\n        if (regExp.test(str)) {\n            resultDate[formOrder[0]] = Number(RegExp.$1);\n            resultDate[formOrder[1]] = Number(RegExp.$2);\n            resultDate[formOrder[2]] = Number(RegExp.$3);\n        } else {\n            return false;\n        }\n\n        if (String(resultDate.year).length === 2) {\n            resultDate.year = Number(this._defaultCentury + resultDate.year);\n        }\n\n        return resultDate;\n    },\n\n    /**\n     * Whether a dateHash is selectable\n     * @param {dateHash} dateHash - dateHash\n     * @returns {boolean} - Whether a dateHash is selectable\n     * @private\n     */\n    _isSelectable: function(dateHash) {\n        var inRange = true,\n            startTimes, startTime, result, timestamp;\n\n        if (!this._isValidDate(dateHash)) {\n            return false;\n        }\n\n        startTimes = this._startTimes;\n        timestamp = utils.getTime(dateHash);\n\n        if (startTimes.length) {\n            result = this._searchEndTime(timestamp);\n            startTime = startTimes[result.index];\n            inRange = result.found || (timestamp >= startTime);\n        }\n\n        return inRange;\n    },\n\n    /**\n     * Set selectable-class-name to selectable date element.\n     * @param {HTMLElement|jQuery} element - date element\n     * @param {{year: number, month: number, date: number}} dateHash - date object\n     * @private\n     */\n    _setSelectableClassName: function(element, dateHash) {\n        if (this._isSelectable(dateHash)) {\n            $(element).addClass(this._selectableClassName);\n        }\n    },\n\n    /**\n     * Set selected-class-name to selected date element\n     * @param {HTMLElement|jQuery} element - date element\n     * @param {{year: number, month: number, date: number}} dateHash - date object\n     * @private\n     */\n    _setSelectedClassName: function(element, dateHash) {\n        var year = this._date.year,\n            month = this._date.month,\n            date = this._date.date,\n            isSelected = (year === dateHash.year) &amp;&amp; (month === dateHash.month) &amp;&amp; (date === dateHash.date);\n\n        if (isSelected) {\n            $(element).addClass(this._selectedClassName);\n        }\n    },\n\n    /**\n     * Set value a date-string of current this instance to input element\n     * @private\n     */\n    _setValueToInputElement: function() {\n        var dateString = this._formed(),\n            timeString = '';\n\n        if (this._timePicker) {\n            timeString = this._timePicker.getTime();\n        }\n        this._$element.val(dateString + timeString);\n    },\n\n    /**\n     * Set(or make) RegExp instance from the date-format of this instance.\n     * @private\n     */\n    _setRegExp: function() {\n        var regExpStr = '^',\n            index = 0,\n            formOrder = this._formOrder;\n\n        this._dateForm.replace(formatRegExp, function(str) {\n            var key = str.toLowerCase();\n\n            regExpStr += (mapForConverting[key].expression + '[\\\\D\\\\s]*');\n            formOrder[index] = mapForConverting[key].type;\n            index += 1;\n        });\n        this._regExp = new RegExp(regExpStr, 'gi');\n    },\n\n    /**\n     * Set event handlers to bind context and then store.\n     * @private\n     */\n    _setProxyHandlers: function() {\n        var proxies = this._proxyHandlers,\n            bind = tui.util.bind;\n\n        // Event handlers for element\n        proxies.onMousedownDocument = bind(this._onMousedownDocument, this);\n        proxies.onKeydownElement = bind(this._onKeydownElement, this);\n        proxies.onClickCalendar = bind(this._onClickCalendar, this);\n        proxies.onClickOpener = bind(this._onClickOpener, this);\n\n        // Event handlers for custom event of calendar\n        proxies.onBeforeDrawCalendar = bind(this._onBeforeDrawCalendar, this);\n        proxies.onDrawCalendar = bind(this._onDrawCalendar, this);\n        proxies.onAfterDrawCalendar = bind(this._onAfterDrawCalendar, this);\n    },\n\n    /**\n     * Event handler for mousedown of document&lt;br>\n     * - When click the out of layer, close the layer\n     * @param {Event} event - event object\n     * @private\n     */\n    _onMousedownDocument: function(event) {\n        var isContains = $.contains(this._$wrapperElement[0], event.target);\n\n        if ((!isContains &amp;&amp; !this._isOpener(event.target))) {\n            this.close();\n        }\n    },\n\n    /**\n     * Event handler for enter-key down of input element\n     * @param {Event} [event] - event object\n     * @private\n     */\n    _onKeydownElement: function(event) {\n        if (!event || event.keyCode !== 13) {\n            return;\n        }\n        this._setDateFromString(this._$element.val());\n    },\n\n    /**\n     * Event handler for click of calendar&lt;br>\n     * - Update date form event-target\n     * @param {Event} event - event object\n     * @private\n     */\n    _onClickCalendar: function(event) {\n        var target = event.target,\n            className = target.className,\n            value = Number((target.innerText || target.textContent || target.nodeValue)),\n            shownDate,\n            relativeMonth,\n            date;\n\n        if (value &amp;&amp; !isNaN(value)) {\n            if (className.indexOf('prev-month') > -1) {\n                relativeMonth = -1;\n            } else if (className.indexOf('next-month') > -1) {\n                relativeMonth = 1;\n            } else {\n                relativeMonth = 0;\n            }\n\n            shownDate = this._calendar.getDate();\n            shownDate.date = value;\n            date = utils.getRelativeDate(0, relativeMonth, 0, shownDate);\n            this.setDate(date.year, date.month, date.date);\n        }\n    },\n\n    /**\n     * Event handler for click of opener-element\n     * @private\n     */\n    _onClickOpener: function() {\n        this.open();\n    },\n\n    /**\n     * Event handler for 'beforeDraw'-custom event of calendar\n     * @private\n     * @see {tui.component.Calendar.draw}\n     */\n    _onBeforeDrawCalendar: function() {\n        this._unbindOnClickCalendar();\n    },\n\n    /**\n     * Event handler for 'draw'-custom event of calendar\n     * @param {Object} eventData - custom event data\n     * @private\n     * @see {tui.component.Calendar.draw}\n     */\n    _onDrawCalendar: function(eventData) {\n        var dateHash = {\n            year: eventData.year,\n            month: eventData.month,\n            date: eventData.date\n        };\n        this._setSelectableClassName(eventData.$dateContainer, dateHash);\n        this._setSelectedClassName(eventData.$dateContainer, dateHash);\n    },\n\n    /**\n     * Event handler for 'afterDraw'-custom event of calendar\n     * @private\n     * @see {tui.component.Calendar.draw}\n     */\n    _onAfterDrawCalendar: function() {\n        this._showOnlyValidButtons();\n        this._bindOnClickCalendar();\n    },\n\n    /**\n     * Show only valid buttons in calendar\n     * @private\n     */\n    _showOnlyValidButtons: function() {\n        var $header = this._calendar.$header,\n            $prevYearBtn = $header.find('[class*=\"btn-prev-year\"]').hide(),\n            $prevMonthBtn = $header.find('[class*=\"btn-prev-month\"]').hide(),\n            $nextYearBtn = $header.find('[class*=\"btn-next-year\"]').hide(),\n            $nextMonthBtn = $header.find('[class*=\"btn-next-month\"]').hide(),\n            shownDateHash = this._calendar.getDate(),\n            shownDate = new Date(shownDateHash.year, shownDateHash.month - 1),\n            startDate = new Date(this._startTimes[0] || CONSTANTS.MIN_EDGE).setDate(1),\n            endDate = new Date(this._endTimes.slice(-1)[0] || CONSTANTS.MAX_EDGE).setDate(1),// arr.slice(-1)[0] === arr[arr.length - 1]\n            startDifference = shownDate - startDate,\n            endDifference = endDate - shownDate;\n\n        if (startDifference > 0) {\n            $prevMonthBtn.show();\n            if (startDifference >= CONSTANTS.YEAR_TO_MS) {\n                $prevYearBtn.show();\n            }\n        }\n\n        if (endDifference > 0) {\n            $nextMonthBtn.show();\n            if (endDifference >= CONSTANTS.YEAR_TO_MS) {\n                $nextYearBtn.show();\n            }\n        }\n    },\n\n    /**\n     * Bind opener-elements event\n     * @param {Array} opOpeners [option.openers] - list of opener elements\n     * @private\n     */\n    _bindOpenerEvent: function(opOpeners) {\n        this._setOpeners(opOpeners);\n        this._$element.on('keydown', this._proxyHandlers.onKeydownElement);\n    },\n\n    /**\n     * Bind a (mousedown|touchstart) event of document\n     * @private\n     */\n    _bindOnMousedownDocument: function() {\n        var eventType = (this.useTouchEvent) ? 'touchstart' : 'mousedown';\n        $(document).on(eventType, this._proxyHandlers.onMousedownDocument);\n    },\n\n    /**\n     * Unbind mousedown,touchstart events of document\n     * @private\n     */\n    _unbindOnMousedownDocument: function() {\n        $(document).off('mousedown touchstart', this._proxyHandlers.onMousedownDocument);\n    },\n\n    /**\n     * Bind click event of calendar\n     * @private\n     */\n    _bindOnClickCalendar: function() {\n        var handler = this._proxyHandlers.onClickCalendar,\n            eventType = (this.useTouchEvent) ? 'touchend' : 'click';\n        this._$wrapperElement.find('.' + this._selectableClassName).on(eventType, handler);\n    },\n\n    /**\n     * Unbind click event of calendar\n     * @private\n     */\n    _unbindOnClickCalendar: function() {\n        var handler = this._proxyHandlers.onClickCalendar;\n        this._$wrapperElement.find('.' + this._selectableClassName).off('click touchend', handler);\n    },\n\n    /**\n     * Bind custom event of calendar\n     * @private\n     */\n    _bindCalendarCustomEvent: function() {\n        var proxyHandlers = this._proxyHandlers,\n            onBeforeDraw = proxyHandlers.onBeforeDrawCalendar,\n            onDraw = proxyHandlers.onDrawCalendar,\n            onAfterDraw = proxyHandlers.onAfterDrawCalendar;\n\n        this._calendar.on({\n            'beforeDraw': onBeforeDraw,\n            'draw': onDraw,\n            'afterDraw': onAfterDraw\n        });\n    },\n\n   /**\n    * Unbind custom event of calendar\n    * @private\n    */\n    _unbindCalendarCustomEvent: function() {\n       var proxyHandlers = this._proxyHandlers,\n           onBeforeDraw = proxyHandlers.onBeforeDrawCalendar,\n           onDraw = proxyHandlers.onDrawCalendar,\n           onAfterDraw = proxyHandlers.onAfterDrawCalendar;\n\n       this._calendar.off({\n           'beforeDraw': onBeforeDraw,\n           'draw': onDraw,\n           'afterDraw': onAfterDraw\n       });\n    },\n\n    /**\n     * Add a range\n     * @api\n     * @param {dateHash} startHash - Start dateHash\n     * @param {dateHash} endHash - End dateHash\n     * @since 1.2.0\n     * @example\n     * var start = {year: 2015, month: 2, date: 3},\n     *     end = {year: 2015, month: 3, date: 6};\n     *\n     * datepicker.addRange(start, end);\n     */\n    addRange: function(startHash, endHash) {\n        if (this._isValidDate(startHash) &amp;&amp; this._isValidDate(endHash)) {\n            this._ranges.push([startHash, endHash]);\n            this._setSelectableRanges();\n            this._calendar.draw();\n        }\n    },\n\n    /**\n     * Remove a range\n     * @param {dateHash} startHash - Start dateHash\n     * @param {dateHash} endHash - End dateHash\n     * @since 1.2.0\n     * @example\n     * var start = {year: 2015, month: 2, date: 3},\n     *     end = {year: 2015, month: 3, date: 6};\n     *\n     * datepicker.addRange(start, end);\n     * datepicker.removeRange(start, end);\n     */\n    removeRange: function(startHash, endHash) {\n        var ranges = this._ranges,\n            target = [startHash, endHash];\n\n        tui.util.forEach(ranges, function(range, index) {\n            if (tui.util.compareJSON(target, range)) {\n                ranges.splice(index, 1);\n                return false;\n            }\n        });\n        this._setSelectableRanges();\n        this._calendar.draw();\n    },\n\n    /**\n     * Set position-left, top of calendar\n     * @api\n     * @param {number} x - position-left\n     * @param {number} y - position-top\n     * @since 1.1.1\n     */\n    setXY: function(x, y) {\n        var pos = this._pos,\n            isNumber = tui.util.isNumber;\n\n        pos.left = isNumber(x) ? x : pos.left;\n        pos.top = isNumber(y) ? y : pos.top;\n        this._arrangeLayer();\n    },\n\n    /**\n     * Set z-index of calendar\n     * @api\n     * @param {number} zIndex - z-index value\n     * @since 1.1.1\n     */\n    setZIndex: function(zIndex) {\n        if (!tui.util.isNumber(zIndex)) {\n            return;\n        }\n\n        this._pos.zIndex = zIndex;\n        this._arrangeLayer();\n    },\n\n    /**\n     * add opener\n     * @api\n     * @param {HTMLElement|jQuery|string} opener - element or selector\n     */\n    addOpener: function(opener) {\n        var eventType = (this.useTouchEvent) ? 'touchend' : 'click',\n            $opener = $(opener);\n\n        opener = $opener[0];\n        if (opener &amp;&amp; inArray(opener, this._openers) &lt; 0) {\n            this._openers.push(opener);\n            $opener.on(eventType, this._proxyHandlers.onClickOpener);\n        }\n    },\n\n    /**\n     * remove opener\n     * @api\n     * @param {HTMLElement|jQuery|string} opener - element or selector\n     */\n    removeOpener: function(opener) {\n        var $opener = $(opener),\n            index = inArray($opener[0], this._openers);\n\n        if (index > -1) {\n            $opener.off('click touchend', this._proxyHandlers.onClickOpener);\n            this._openers.splice(index, 1);\n        }\n    },\n\n    /**\n     * Open calendar with arranging position\n     * @api\n     * @example\n     * datepicker.open();\n     */\n    open: function() {\n        if (this.isOpened()) {\n            return;\n        }\n\n        this._arrangeLayer();\n        this._bindCalendarCustomEvent();\n        this._calendar.draw(this._date.year, this._date.month, false);\n        this._$wrapperElement.show();\n        if (!this.showAlways) {\n            this._bindOnMousedownDocument();\n        }\n\n        /**\n         * @api\n         * @event DatePicker#open\n         * @example\n         * datePicker.on('open', function() {\n         *     alert('open');\n         * });\n         */\n        this.fire('open');\n    },\n\n    /**\n     * Close calendar with unbinding some events\n     * @api\n     * @exmaple\n     * datepicker.close();\n     */\n    close: function() {\n        if (!this.isOpened()) {\n            return;\n        }\n        this._unbindCalendarCustomEvent();\n        this._unbindOnMousedownDocument();\n        this._$wrapperElement.hide();\n\n        /**\n         * Close event - DatePicker\n         * @api\n         * @event DatePicker#close\n         * @example\n         * datePicker.on('close', function() {\n         *     alert('close');\n         * });\n         */\n        this.fire('close');\n    },\n\n    /**\n     * Get date-object of current DatePicker instance.\n     * @api\n     * @returns {dateHash} - dateHash having year, month and day-in-month\n     * @example\n     * // 2015-04-13\n     * datepicker.getDateHash(); // {year: 2015, month: 4, date: 13}\n     */\n    getDateHash: function() {\n        return tui.util.extend({}, this._date);\n    },\n\n    /**\n     * Return year\n     * @api\n     * @returns {number} - year\n     * @example\n     * // 2015-04-13\n     * datepicker.getYear(); // 2015\n     */\n    getYear: function() {\n        return this._date.year;\n    },\n\n    /**\n     * Return month\n     * @api\n     * @returns {number} - month\n     * @example\n     * // 2015-04-13\n     * datepicker.getMonth(); // 4\n     */\n    getMonth: function() {\n        return this._date.month;\n    },\n\n    /**\n     * Return day-in-month\n     * @api\n     * @returns {number} - day-in-month\n     * @example\n     * // 2015-04-13\n     * datepicker.getDayInMonth(); // 13\n     */\n    getDayInMonth: function() {\n        return this._date.date;\n    },\n\n    /**\n     * Set date from values(year, month, date) and then fire 'update' custom event\n     * @api\n     * @param {string|number} [year] - year\n     * @param {string|number} [month] - month\n     * @param {string|number} [date] - day in month\n     * @example\n     * datepicker.setDate(2014, 12, 3); // 2014-12- 03\n     * datepicker.setDate(null, 11, 23); // 2014-11-23\n     * datepicker.setDate('2015', '5', 3); // 2015-05-03\n     */\n    setDate: function(year, month, date) {\n        var dateObj = this._date,\n            newDateObj = {};\n\n        newDateObj.year = year || dateObj.year;\n        newDateObj.month = month || dateObj.month;\n        newDateObj.date = date || dateObj.date;\n\n        if (this._isSelectable(newDateObj)) {\n            tui.util.extend(dateObj, newDateObj);\n        }\n        this._setValueToInputElement();\n        this._calendar.draw(dateObj.year, dateObj.month, false);\n\n        /**\n         * Update event\n         * @api\n         * @event DatePicker#update\n         */\n        this.fire('update');\n    },\n\n    /**\n     * Set or update date-form\n     * @api\n     * @param {String} [form] - date-format\n     * @example\n     * datepicker.setDateForm('yyyy-mm-dd');\n     * datepicker.setDateForm('mm-dd, yyyy');\n     * datepicker.setDateForm('y/m/d');\n     * datepicker.setDateForm('yy/mm/dd');\n     */\n    setDateForm: function(form) {\n        this._dateForm = form || this._dateForm;\n        this._setRegExp();\n        this.setDate();\n    },\n\n    /**\n     * Return whether the calendar is opened or not\n     * @api\n     * @returns {boolean} - true if opened, false otherwise\n     * @example\n     * datepicker.close();\n     * datepicker.isOpened(); // false\n     *\n     * datepicker.open();\n     * datepicker.isOpened(); // true\n     */\n    isOpened: function() {\n        return (this._$wrapperElement.css('display') === 'block');\n    },\n\n    /**\n     * Return TimePicker instance\n     * @api\n     * @returns {TimePicker} - TimePicker instance\n     * @example\n     * var timepicker = this.getTimepicker();\n     */\n    getTimePicker: function() {\n        return this._timePicker;\n    }\n});\n\ntui.util.CustomEvents.mixin(DatePicker);\n\nmodule.exports = DatePicker;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"